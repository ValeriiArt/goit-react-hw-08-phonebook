{"version":3,"file":"static/js/122.8ff3825d.chunk.js","mappings":"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","sources":["redux/contacts/contacts-selectors.js","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","components/ContactsForm/ContactsForm.jsx","pages/Contacts.jsx"],"sourcesContent":["\n\nconst getLoading = state => state.contacts.loading;\nconst getFilter = state => state.contacts.filter;\nconst getContacts = state => state.contacts.items;\n\n\nconst contactsSelectors = {\n    getLoading,\n    getFilter,\n    getContacts,\n};\nexport default contactsSelectors;","import * as React from 'react';\nimport { useDispatch } from \"react-redux\";\nimport { filterContact } from '../../redux/contacts/contacts-slice'\nimport TextField from '@mui/material/TextField';\n// import contactsSelectors  from '../../redux/contacts/contacts-selectors';\n\n\nconst Filter = () => {\n    // const filterValue = useSelector(contactsSelectors.getFilter);\n    const dispatch = useDispatch();\n    const findContact = (e) => dispatch(filterContact(e.target.value));\n        \n    return (\n        <div>\n            <TextField\n                 \n                id=\"standard-basic\"\n                label=\"Find contacts by name\"\n                variant=\"standard\"\n                component=\"form\"\n                sx={{\n                    '& > :not(style)': { m: 1, width: '25ch' },\n                }}\n                noValidate\n                autoComplete=\"off\"\n                name='filter'\n                type=\"text\"\n                onChange={findContact}\n            />\n\n        </div>\n    );\n}\n\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactItem\":\"ContactItem_contactItem__Z4FuP\",\"itemText\":\"ContactItem_itemText__1lmp+\",\"delete\":\"ContactItem_delete__jQlZo\"};","import PropTypes from 'prop-types';\nimport { useDispatch } from \"react-redux\";\nimport {deleteContact} from '../../redux/contacts/contactsApi'\nimport s from './ContactItem.module.css'\n\n\n\nconst ContactItem = ({id, name, number }) => {\n  \n  const dispatch = useDispatch();\n    const handleDeleteContact = async (id) => {\n        await dispatch(deleteContact(id)).unwrap();\n    }\n\n    return (\n        <li className={s.contactItem} >\n            <p className={s.itemText}>{name}:</p>\n            <p className={s.itemText}>{number}</p>\n            <span className={s.delete}\n                onClick={() => handleDeleteContact(id)}\n            >\n                &times;\n            </span>\n        </li>\n    );\n};\n\nContactItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n}\nexport default ContactItem;","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\",\"contactListTitle\":\"ContactList_contactListTitle__-6FRG\",\"itemText\":\"ContactList_itemText__yooCv\"};","import { useEffect, useMemo } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {fetchContacts} from '../../redux/contacts/contactsApi'\nimport contactsSelectors from \"../../redux/contacts/contacts-selectors\";\nimport Filter from \"components/Filter\";\nimport ContactItem from \"../ContactItem/ContactItem\";\nimport s from './ContactList.module.css'\n\n\nconst ContactList = () => {\n  const { getContacts, getFilter } = contactsSelectors;\n  const dispatch = useDispatch();\n  const data = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n\n  \n  useEffect(() => {\n    dispatch(fetchContacts())\n  }, [dispatch])\n\n  const findContact = useMemo(() => {\n    \n    const result = data?.filter(contact =>\n      contact.name.toLowerCase().trim().includes(filter.toLowerCase().trim())\n    );\n    return result ?? [];\n  }, [data, filter]);\n\n\n  return (\n    <div className={s.contactList} >\n      <Filter/>\n      <h3 className={s.contactListTitle} >My contacts</h3>\n        {findContact.length > 0 ?\n          <ul>\n          {findContact.map(contact =>\n            <ContactItem key={contact.id} {...contact} />\n          )}\n          </ul> :\n        <p>🫥 </p>\n        } \n    </div>\n  )\n};\n\nexport default ContactList;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/contactsApi';\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\nimport {NotificationManager} from 'react-notifications';\n\n\n\nconst styles = {\n  form: {\n    width: 320,\n  },\n  label: {\n    display: 'flex',\n    flexDirection: 'column',\n    marginBottom: 15,\n  },\n};\n\nexport default function ContactForm() {\n  const { getContacts } = contactsSelectors;\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  \n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts)\n \n\n  const handleChange= e => {\n    const { name, value } = e.currentTarget;  \n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }; \n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase()) \n      ? NotificationManager.info(`${name} вже є у ваших контактах`)\n      : dispatch(addContact({name, number}));\n      setName('');\n      setNumber('');\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit} style={styles.form} autoComplete=\"off\">\n        <label style={styles.label}>\n        Name\n            <input\n            type=\"text\"\n            name=\"name\"\n            onChange={handleChange}\n            value={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <label style={styles.label}>\n          Number\n            <input\n            type=\"tel\"\n            name=\"number\"\n            onChange={handleChange}\n            value={number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n        <button type=\"submit\">Add Contact</button>\n      </form>      \n    </div>\n  );  \n};\n","import * as React from 'react';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { styled } from '@mui/material/styles';\n// import Box from '@mui/material/Box';\nimport Container from '@mui/material/Container';\nimport ContactList from \"components/ContactList\";\nimport ContactForm from \"components/ContactsForm/ContactsForm\";\nimport Paper from '@mui/material/Paper';\nimport Grid from '@mui/material/Grid';\n\nconst Item = styled(Paper)(({ theme }) => ({\n  backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\n  ...theme.typography.body2,\n  padding: theme.spacing(1),\n  // textAlign: 'center',\n  color: theme.palette.text.secondary,\n}));\n\n\n\nconst styles = {\n  contactTitle: {\n    textAlign: 'center',\n    marginBottom: 25,\n  },\n  // container: {\n  //   display: 'flex',\n  //   justifyContent: 'space-around',\n  //   marginBottom: 15,\n  // },\n};\n\nexport default function Contacts() {\n  \n  return (\n     <React.Fragment>\n      <CssBaseline />\n        <Container maxWidth=\"sx\">\n        <h1 style={styles.contactTitle}>Welcom to phonebook👻</h1>\n        <Grid container spacing={2}>\n              <ContactForm />\n          {/* <Grid item  md={6}>\n            <Item>\n            </Item>\n          </Grid> */}\n          <Grid item  md={6}>\n            <Item>\n              <ContactList />\n            </Item>\n          </Grid>\n        </Grid>\n            {/* {isLoadingContacts && <h2>Loading...</h2>} */} \n        </Container>\n    </React.Fragment>\n  //   <div>\n  //     <div style={styles.container}>\n  //     </div>\n  //   </div>\n  )\n};\n"],"names":["getLoading","state","contacts","loading","getFilter","filter","getContacts","items","dispatch","useDispatch","TextField","id","label","variant","component","sx","m","width","noValidate","autoComplete","name","type","onChange","e","filterContact","target","value","number","handleDeleteContact","deleteContact","unwrap","className","s","onClick","contactsSelectors","data","useSelector","useEffect","fetchContacts","findContact","useMemo","result","contact","toLowerCase","trim","includes","length","map","styles","form","display","flexDirection","marginBottom","ContactForm","useState","setName","setNumber","handleChange","currentTarget","onSubmit","preventDefault","find","NotificationManager","addContact","style","pattern","title","required","Item","styled","Paper","theme","backgroundColor","palette","mode","typography","body2","padding","spacing","color","text","secondary","contactTitle","textAlign","Contacts","CssBaseline","Container","maxWidth","Grid","container","item","md"],"sourceRoot":""}