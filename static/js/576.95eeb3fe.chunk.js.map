{"version":3,"file":"static/js/576.95eeb3fe.chunk.js","mappings":"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","sources":["redux/contacts/contacts-selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","components/ContactsForm/ContactsForm.jsx","pages/Contacts.jsx"],"sourcesContent":["\n\nconst getLoading = state => state.contacts.loading;\nconst getFilter = state => state.contacts.filter;\nconst getContacts = state => state.contacts.items;\n\n\nconst contactsSelectors = {\n    getLoading,\n    getFilter,\n    getContacts,\n};\nexport default contactsSelectors;","// extracted by mini-css-extract-plugin\nexport default {\"formInput\":\"Filter_formInput__XNLZn\"};","import { useDispatch } from \"react-redux\";\nimport {filterContact} from '../../redux/contacts/contacts-slice'\n// import contactsSelectors  from '../../redux/contacts/contacts-selectors';\nimport s from './Filter.module.css'\n\nconst Filter = () => {\n    // const filterValue = useSelector(contactsSelectors.getFilter);\n    const dispatch = useDispatch();\n    const findContact = (e) => dispatch(filterContact(e.target.value));\n        \n    return (\n        <div>\n            <label>\n                <input\n                    className={s.formInput}\n                    name='filter'\n                    type=\"text\"\n                    placeholder=\"Find contacts by name\"\n                    // value={filterValue}\n                    onChange={findContact}\n                />\n            </label>\n        </div>\n    );\n}\n\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactItem\":\"ContactItem_contactItem__Z4FuP\",\"itemText\":\"ContactItem_itemText__1lmp+\",\"delete\":\"ContactItem_delete__jQlZo\"};","import PropTypes from 'prop-types';\nimport { useDispatch } from \"react-redux\";\nimport {deleteContact} from '../../redux/contacts/contactsApi'\nimport s from './ContactItem.module.css'\n\n\n\nconst ContactItem = ({id, name, number }) => {\n  \n  const dispatch = useDispatch();\n    const handleDeleteContact = async (id) => {\n        await dispatch(deleteContact(id)).unwrap();\n    }\n\n    return (\n        <li className={s.contactItem} >\n            <p className={s.itemText}>{name}:</p>\n            <p className={s.itemText}>{number}</p>\n            <span className={s.delete}\n                onClick={() => handleDeleteContact(id)}\n            >\n                &times;\n            </span>\n        </li>\n    );\n};\n\nContactItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n}\nexport default ContactItem;","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\",\"contactListTitle\":\"ContactList_contactListTitle__-6FRG\",\"itemText\":\"ContactList_itemText__yooCv\"};","import { useEffect, useMemo } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {fetchContacts} from '../../redux/contacts/contactsApi'\nimport contactsSelectors from \"../../redux/contacts/contacts-selectors\";\nimport Filter from \"components/Filter\";\nimport ContactItem from \"../ContactItem/ContactItem\";\nimport s from './ContactList.module.css'\n\n\nconst ContactList = () => {\n  const { getContacts, getFilter } = contactsSelectors;\n  const dispatch = useDispatch();\n  const data = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n\n  \n  useEffect(() => {\n    dispatch(fetchContacts())\n  }, [dispatch])\n\n  const findContact = useMemo(() => {\n    \n    const result = data?.filter(contact =>\n      contact.name.toLowerCase().trim().includes(filter.toLowerCase().trim())\n    );\n    return result ?? [];\n  }, [data, filter]);\n\n\n  return (\n    <div className={s.contactList} >\n      <Filter/>\n      <h3 className={s.contactListTitle} >My contacts</h3>\n        {findContact.length > 0 ?\n          <ul>\n          {findContact.map(contact =>\n            <ContactItem key={contact.id} {...contact} />\n          )}\n          </ul> :\n        <p>🫥 </p>\n        } \n    </div>\n  )\n};\n\nexport default ContactList;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/contactsApi';\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\nimport {NotificationManager} from 'react-notifications';\n\n\n\nconst styles = {\n  form: {\n    width: 320,\n  },\n  label: {\n    display: 'flex',\n    flexDirection: 'column',\n    marginBottom: 15,\n  },\n};\n\nexport default function ContactForm() {\n  const { getContacts } = contactsSelectors;\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  \n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts)\n \n\n  const handleChange= e => {\n    const { name, value } = e.currentTarget;  \n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }; \n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase()) \n      ? NotificationManager.info(`${name} вже є у ваших контактах`)\n      : dispatch(addContact({name, number}));\n      setName('');\n      setNumber('');\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit} style={styles.form} autoComplete=\"off\">\n        <label style={styles.label}>\n        Name\n            <input\n            type=\"text\"\n            name=\"name\"\n            onChange={handleChange}\n            value={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <label style={styles.label}>\n          Number\n            <input\n            type=\"tel\"\n            name=\"number\"\n            onChange={handleChange}\n            value={number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n        <button type=\"submit\">Add Contact</button>\n      </form>      \n    </div>\n  );  \n};\n","import ContactList from \"components/ContactList\";\nimport ContactForm from \"components/ContactsForm/ContactsForm\";\n\n\n\nconst styles = {\n  contactTitle: {\n    textAlign: 'center',\n    marginBottom: 25,\n  },\n  container: {\n    display: 'flex',\n    justifyContent: 'space-around',\n    marginBottom: 15,\n  },\n};\n\nexport default function Contacts() {\n  \n  return (\n    <div>\n        <h1 style={styles.contactTitle}>Welcom to phonebook👻</h1>\n      <div style={styles.container}>\n        <ContactForm />\n        {/* {isLoadingContacts && <h2>Loading...</h2>} */}\n        <ContactList />\n      </div>\n    </div>\n  )\n};\n"],"names":["getLoading","state","contacts","loading","getFilter","filter","getContacts","items","dispatch","useDispatch","className","s","name","type","placeholder","onChange","e","filterContact","target","value","id","number","handleDeleteContact","deleteContact","unwrap","onClick","contactsSelectors","data","useSelector","useEffect","fetchContacts","findContact","useMemo","result","contact","toLowerCase","trim","includes","length","map","styles","form","width","label","display","flexDirection","marginBottom","ContactForm","useState","setName","setNumber","handleChange","currentTarget","onSubmit","preventDefault","find","NotificationManager","addContact","style","autoComplete","pattern","title","required","contactTitle","textAlign","container","justifyContent","Contacts"],"sourceRoot":""}